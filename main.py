import asyncio
import logging
import random
import aiohttp
import json
import sys
import io
from aiogram import Bot, Dispatcher
from aiogram.methods import DeleteWebhook
from aiogram import types
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command
from datetime import datetime
from mistralai import Mistral
from typing import Optional
from collections import deque

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_KEY = ""
MODEL = "mistral-small-latest"
IMAGE_API_KEY = ""
BOT_TOKEN = ""
ADMIN_ID = 
CHANNEL_ID =   # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = Mistral(api_key=API_KEY) if API_KEY else None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_RETRIES = 3
RETRY_DELAY = 5
MAX_CAPTION_LENGTH = 1024

# –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤
post_queue = deque()

# –ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞
ZODIAC_SIGNS = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", 
    "–õ–µ–≤", "–î–µ–≤–∞", "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω",
    "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]

# –¢–µ–º—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤
MYSTIC_TOPICS = [
    "–¢–∞—Ä–æ –∏ –∏—Ö —Å–∫—Ä—ã—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
    "–†—É–Ω—ã: –¥—Ä–µ–≤–Ω–∏–π —è–∑—ã–∫ —Å–∏–º–≤–æ–ª–æ–≤",
    "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏",
    "–õ—É–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ",
    "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –∫–∞–º–Ω–µ–π –∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤"
]

ASTROLOGY_FACTS = [
    "–ò—Å—Ç–æ—Ä–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏: –æ—Ç –¥—Ä–µ–≤–Ω–æ—Å—Ç–∏ –¥–æ –Ω–∞—à–∏—Ö –¥–Ω–µ–π",
    "–ö–∞–∫ –ø–ª–∞–Ω–µ—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏",
    "–°–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞",
    "–ö–∞–∫ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏"
]

# –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞–∫–∞
current_zodiac_index = datetime.now().day % len(ZODIAC_SIGNS)

async def check_internet() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    for _ in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.get("http://www.google.com"):
                    return True
        except:
            await asyncio.sleep(2)
    return False

async def notify_admin(text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        await bot.send_message(ADMIN_ID, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

async def generate_image(prompt: str) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API"""
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            async with session.post(
                "https://neuroimg.art/api/v1/free-generate",
                json={"token": IMAGE_API_KEY, "prompt": prompt}
            ) as resp:
                async for line in resp.content:
                    if b'"status":"SUCCESS"' in line:
                        return line.decode().split('"image_url":"')[1].split('"')[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None

async def download_image(url: str) -> Optional[bytes]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    return await resp.read()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None

async def send_post(text: str, post_type: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
    if not text:
        logger.error("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
        return

    for attempt in range(MAX_RETRIES):
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
            try:
                chat = await bot.get_chat(CHANNEL_ID)
                logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª: {chat.title}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
                await notify_admin(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
                return

            # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_sent = False
            try:
                image_url = await generate_image(f"{post_type}: {text[:50]}")
                if image_url:
                    image_data = await download_image(image_url)
                    if image_data:
                        await bot.send_photo(
                            chat_id=CHANNEL_ID,
                            photo=BufferedInputFile(image_data, "image.jpg"),
                            caption=text[:MAX_CAPTION_LENGTH],
                            parse_mode="Markdown"
                        )
                        image_sent = True
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            if not image_sent:
                await bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=text,
                    parse_mode="Markdown"
                )
            return  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < MAX_RETRIES - 1:
                await asyncio.sleep(RETRY_DELAY * (attempt + 1))
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
    post_queue.append((text, post_type))
    await notify_admin(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫")
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
    post_queue.append((text, post_type))
    await notify_admin(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫")

async def generate_content(prompt: str, max_tokens=500) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Mistral API"""
    try:
        response = client.chat.complete(
            model=MODEL,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        return ""

async def generate_mini_horoscope() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏-–≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    day = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"][datetime.now().weekday()]
    prompt = f"–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {day} –¥–ª—è –≤—Å–µ—Ö –∑–Ω–∞–∫–æ–≤. –§–æ—Ä–º–∞—Ç: [–ó–Ω–∞–∫] [–≠–º–æ–¥–∑–∏]: [–°–æ–≤–µ—Ç 3-5 —Å–ª–æ–≤]. –ù–∞—á–Ω–∏ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."
    content = await generate_content(prompt)
    return f"üåÖ –î–û–ë–†–û–ï –£–¢–†–û! üåÖ\n\n{content}"

async def generate_daily_horoscope() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    global current_zodiac_index
    zodiac = ZODIAC_SIGNS[current_zodiac_index]
    current_zodiac_index = (current_zodiac_index + 1) % len(ZODIAC_SIGNS)
    prompt = f"–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π). –¢–æ–Ω: –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π."
    content = await generate_content(prompt)
    return f"üîÆ {zodiac.upper()} üîÆ\n\n{content}"

async def generate_fact() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–∞"""
    prompt = "–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π). –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏."
    content = await generate_content(prompt)
    return f"üåå –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –§–ê–ö–¢ üåå\n\n{content}"

async def generate_night_wish() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è"""
    prompt = "–ù–∞–ø–∏—à–∏ –¥–æ–±—Ä–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –Ω–∞ –Ω–æ—á—å (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å–æ–≤–µ—Ç–æ–º."
    content = await generate_content(prompt, 200)
    return f"üåô –°–ü–û–ö–û–ô–ù–û–ô –ù–û–ß–ò! üåô\n\n{content}"


try:
    with open('zodiac_index.txt', 'r') as f:
        current_zodiac_index = int(f.read().strip())
except (FileNotFoundError, ValueError):
    current_zodiac_index = datetime.now().day % len(ZODIAC_SIGNS)

def save_zodiac_index():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –≤ —Ñ–∞–π–ª"""
    with open('zodiac_index.txt', 'w') as f:
        f.write(str(current_zodiac_index))

async def generate_daily_horoscope() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    global current_zodiac_index
    zodiac = ZODIAC_SIGNS[current_zodiac_index]
    current_zodiac_index = (current_zodiac_index + 1) % len(ZODIAC_SIGNS)
    save_zodiac_index()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    
    prompt = f"–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π). –¢–æ–Ω: –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π."
    content = await generate_content(prompt)
    return f"üîÆ {zodiac.upper()} üîÆ\n\n{content}"

async def posting_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
    while True:
        try:
            if not await check_internet():
                logger.warning("–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                await asyncio.sleep(60)
                continue

            now = datetime.now()
            today = now.date()
            hour = now.hour
            minute = now.minute

            # –£—Ç—Ä–µ–Ω–Ω–∏–π –º–∏–Ω–∏-–≥–æ—Ä–æ—Å–∫–æ–ø (8:00)
            if hour == 8 and minute < 30:
                if text := await generate_mini_horoscope():
                    await send_post(text, "horoscope")
                    await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    continue

            # –í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç (20:00)
            if hour == 20 and minute < 30:
                if text := await generate_night_wish():
                    await send_post(text, "mystic")
                    await asyncio.sleep(3600)
                    continue

            # –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 12:00)
            if hour == 12 and minute < 30:
                if text := await generate_daily_horoscope():
                    await send_post(text, "horoscope")
                    await asyncio.sleep(3600)
                    continue

            # –§–∞–∫—Ç—ã (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
            if hour % 6 == 0 and minute < 30:
                if text := await generate_fact():
                    await send_post(text, "fact")
                    await asyncio.sleep(3600)
                    continue
            
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
            await asyncio.sleep(60)

async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    while True:
        try:
            if not await check_internet():
                await notify_admin("‚ö† –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get("https://api.mistral.ai/health", timeout=10):
                        pass
            except Exception as e:
                await notify_admin(f"‚ö† –ü—Ä–æ–±–ª–µ–º—ã —Å Mistral API: {str(e)}")
            
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ health check: {e}")
            await asyncio.sleep(300)

async def process_queue():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç–æ–≤"""
    while True:
        if post_queue:
            text, post_type = post_queue.popleft()
            await send_post(text, post_type)
        await asyncio.sleep(10)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer("üîÆ –ë–æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω!")

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await bot(DeleteWebhook(drop_pending_updates=True))
    await notify_admin("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    asyncio.create_task(posting_loop())
    asyncio.create_task(process_queue())
    asyncio.create_task(health_check())  # –î–æ–±–∞–≤–ª—è–µ–º health check

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")